/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 22.07.2024 11:22:06

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 30128;
#else
constexpr int kTensorArenaSize = 29104;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,13960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 349, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 349, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 175, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 175, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 1408, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[7] = { -1290, -2034, -1850, 1279, 1228, 885, -1704, };
const TfArray<1, int> tensor_dimension6 = { 1, { 7 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00014133234799373895, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[7*1408] = { 
  14, -3, 2, -7, -11, -21, 1, -6, 4, 10, -1, -20, -1, -16, -12, 8, -16, 13, -11, -8, -9, -1, -25, 0, -2, -6, -14, -11, 4, 4, -1, -5, 13, 2, 3, 7, -10, 6, -8, 7, 2, 7, -22, -10, 20, 5, 4, 8, 13, 8, -1, -8, -10, 4, -13, 3, -3, 3, -16, -5, 11, 17, 15, 20, 0, -10, -6, -15, 2, -3, -14, 3, -7, -10, -8, -4, -7, 16, -4, 1, 5, -2, 8, -8, -12, 3, 4, -2, -11, -15, -1, -8, -7, -9, 6, -3, 0, 4, -5, -7, 0, 3, -1, 6, -2, 3, -3, -1, -4, -26, 5, 8, -8, -2, -5, -10, -14, 0, -19, 0, -9, -9, -8, -6, -5, -6, -12, -30, -15, 3, -4, -6, -13, 3, -33, -4, 1, 2, -3, 1, -2, -10, -4, -19, -7, 9, 5, 6, -2, -1, 8, 5, 4, 3, -9, -2, -10, -3, 4, 22, 7, 2, 1, -5, 2, -6, -8, -3, 1, 11, -5, 4, -15, -2, -5, 19, 1, 4, 4, 12, -4, -16, 9, -9, 1, 5, 1, -9, -1, -4, -13, 16, -5, -11, -9, -6, 10, -14, 8, -5, 4, 18, 2, -28, 9, 8, 7, 12, -4, 2, -9, -4, -8, -8, -16, -7, -4, 5, -1, -15, 7, -2, -12, 15, -6, 3, 0, -8, -2, -2, -12, -3, 4, -10, -7, 0, 5, 15, 9, 4, -5, -1, 8, -5, -17, -2, 3, 6, -6, -5, -10, -8, 4, 12, 8, 3, -1, 6, -4, -11, -11, 7, -9, -3, 3, -5, -18, -1, 5, 5, 5, 13, -2, -11, -3, -10, 0, 3, -4, 7, -8, -14, -15, 6, -21, 7, 4, -1, -8, -8, -6, -2, -9, 6, -2, 2, 1, -12, -9, -5, -7, -3, -6, -22, 13, 8, 5, -7, -4, 2, -11, 6, 3, -2, -12, -9, -8, -10, 9, -2, -2, -2, -8, 6, -8, -2, 12, 0, -3, 4, -15, 1, 4, -17, -14, -20, -9, 3, -12, -9, -6, -2, -22, -9, -17, -6, -13, 0, -1, -16, -3, 9, 10, -1, 10, 1, -16, -6, -4, -3, 2, 11, 10, -14, 13, 4, -10, 13, 11, 7, 0, -8, 6, -18, 14, -5, 9, 6, -6, -9, 1, 12, -17, 2, -6, -1, -7, 1, 11, -12, 7, -16, 9, 15, 2, -14, 1, -6, -8, 13, -2, -13, -14, -8, 1, -15, -8, -14, -6, 0, 3, -13, 6, -9, -3, -2, -5, -14, -7, -2, -3, -1, -11, -4, -9, -3, 0, 1, -8, 18, -7, -5, 3, -17, 4, -5, 7, 10, -5, 10, -3, 5, -16, -6, 14, 25, -4, -1, 7, 8, 0, -1, -11, 11, -13, 7, 4, -8, -19, 10, -13, -3, 10, 13, 2, -1, -19, 4, 5, 3, 3, 4, -4, -1, -8, -10, 6, 17, 1, -9, -14, -7, -8, -2, -10, 16, -12, -2, -3, -13, -5, 10, -4, -11, 9, -4, 5, 1, 7, 1, -13, 11, -9, 2, -3, -2, -15, 7, -7, 7, -5, -4, 4, -1, 7, -5, 0, 6, -17, 6, -2, -5, -18, -8, 0, -9, 3, -22, -4, -1, -2, -1, -14, 9, -20, 4, -8, -8, -1, 0, -12, -15, 4, -1, 12, 8, 14, -6, -19, -7, -5, 4, -3, -5, -15, -2, -8, -4, 4, 11, 13, 6, 10, -2, 6, -4, 1, 2, 8, 9, -17, 1, 12, 12, 4, 10, 18, 11, 14, -5, -5, -7, 9, 3, 19, 17, 0, -1, 4, -8, -2, 16, 0, -8, 2, -4, 16, -12, -6, -6, 5, 12, 6, 1, 16, 0, -7, 2, -1, -10, -10, -8, 9, -6, -10, 0, -4, -2, -5, -7, 2, -17, -8, 3, 1, -5, -4, 3, 5, -1, -10, 1, -9, -3, -1, -7, -5, -4, -5, -12, 6, 6, 6, -1, -11, 1, -28, 6, -2, 0, -9, -6, 14, 1, -1, 0, 4, 15, 4, 5, -13, 0, -12, 1, 16, 20, -16, 4, 15, 18, 5, 22, -2, -4, -8, 2, -7, 2, -15, 2, 6, 0, -8, 0, -7, -4, 6, 5, -8, -6, -7, 4, -30, -4, -11, -3, -13, -21, -19, 12, -18, -18, -3, 7, 15, 3, 6, -5, 6, -3, -23, 6, -4, -1, -10, -1, 2, 3, -10, -12, -2, 3, 3, -6, -34, -5, 1, 4, 5, 0, -15, -1, -35, 5, -5, 11, -9, 0, -6, -7, 0, -8, -4, -11, -7, -10, 1, -1, -9, -11, -4, -11, 13, 2, 11, -9, 0, -4, 13, 2, 0, 14, -2, -4, 20, 15, -1, -1, 4, 2, 4, 3, -34, -4, 16, 0, -2, -6, 0, -12, -8, 1, 4, 20, 1, -3, -7, -7, -1, -8, 5, -6, -2, 14, 22, -4, 0, -12, -15, -22, 0, -3, -14, -2, 3, 2, -7, -6, 0, -7, -3, -9, 6, -9, -14, -23, -7, -7, -7, -12, -6, 1, -10, -3, -6, -14, 2, -8, -2, -1, -18, -10, -7, -4, -3, -3, 16, -5, -11, 2, 6, 14, -2, -5, -1, -17, -8, -9, 1, 15, -6, 1, -15, 0, -7, 10, 6, 8, -16, -3, -7, 0, 6, 21, 4, 7, 0, -2, 0, 3, 2, 6, -3, 4, -7, 4, 11, 10, -1, -4, -3, -6, -4, 5, 5, 2, -24, 0, -2, -17, -4, -8, -13, -7, -1, -2, 8, -2, 2, 4, 2, 0, -3, 8, -4, 3, -16, -13, -11, -4, 1, -1, 1, 1, 1, -4, 2, 0, 7, -4, -4, 8, -11, 7, 4, 6, -3, 2, 3, -2, -9, -9, -13, 3, 3, -14, -4, -16, -10, -2, -18, -9, -4, -5, 0, -14, 7, -1, -5, 8, -3, 5, -6, -12, -27, -9, 0, 14, 8, -14, 21, -1, 1, -1, -1, 4, 14, 0, 2, 8, -20, 3, -5, -3, 16, -3, 7, 12, 9, 1, 11, 2, -4, 1, 3, 1, 21, 2, 14, -18, -22, -2, -2, 1, -7, -4, 16, -5, -18, -9, 7, 5, 27, 2, 4, -22, -3, -22, -1, -13, 0, -12, 14, -4, -28, -7, -8, -6, -1, -15, -2, -1, -14, -15, -1, -5, -4, 3, 11, -4, -25, 2, -3, -5, -1, 0, 0, -24, -8, -16, -3, 2, 0, 4, 9, -5, -6, 5, 3, -2, -18, -10, 9, -17, -5, -16, 12, 19, 16, -1, -5, -10, 11, 11, 8, 23, -15, -4, -1, -32, 3, 13, 10, -3, 9, 4, -14, -9, 4, 2, 8, 9, -10, -8, -8, -18, -4, 2, -7, 6, 8, -4, -4, 4, -11, -1, -1, -5, -23, 2, -3, 13, 3, -12, 5, 5, 8, -4, -1, 2, 4, -2, 6, 1, -12, 1, 4, 0, -2, -6, 4, -1, -7, -2, -14, -2, -3, -7, -2, -14, 1, -1, -11, -4, 5, -22, -8, -13, 7, -7, -6, 6, -14, 4, -4, -7, -10, -6, -9, -13, 8, -11, 13, -7, 9, -5, -14, -2, 13, 8, 3, -1, -24, -7, 18, 10, 18, -3, 19, 7, 17, 0, -31, -3, 18, 8, -5, 14, -9, -7, -17, -7, 10, 8, 15, 12, 5, -5, -3, -5, -12, 4, 13, 16, -1, 0, 7, -8, -1, -18, 12, 2, 4, -1, 17, -7, -25, -3, 2, 23, 12, -15, 11, -23, -13, -24, -3, 2, -8, -6, 25, -5, -20, -10, -10, -4, 9, -16, 1, 0, -5, -19, -10, -12, -2, 1, 21, -9, -13, -3, -4, 0, 4, -9, 7, -20, 1, -31, -4, 16, 12, -10, 2, -2, -9, 2, 1, 0, -16, -3, 5, 8, 5, -3, 22, -1, 18, 3, -3, -1, 13, 7, 8, 9, -11, -3, 15, 9, 9, 13, 11, -4, 1, 0, -15, 3, -23, -3, -8, -3, -5, -11, 4, 1, 4, 17, 8, 6, 6, 6, -5, 6, -32, 9, 5, 4, 0, -4, 2, -2, 5, -8, 7, 1, -3, -6, 10, 2, -22, -6, 8, 7, 6, -9, -8, -8, -2, 3, -3, -16, -10, -10, 3, -3, -5, -5, -7, -21, -8, -14, -25, 5, 5, -4, 14, -6, -5, -10, 7, 1, 1, -4, -11, -12, -14, -5, -8, 6, 4, -14, 18, 10, 11, 0, -20, -1, -9, 6, 0, 6, -12, -3, -13, 3, 11, 16, 13, 9, 20, 4, -9, -6, 11, 2, 14, 18, 0, 0, 11, -11, 6, -11, 7, 3, 1, -4, -31, 3, -15, 6, 10, 2, 6, -1, 19, -3, 1, -5, 
  -18, -15, -20, -29, -2, -3, -12, -5, -8, -13, -16, -18, -5, -8, -15, -26, -2, -14, -15, -11, -25, -3, -7, -12, -6, 1, -13, -2, -1, -28, -4, -12, -3, -2, -8, -3, 5, 0, 0, -1, -4, -4, -10, -3, 10, -2, 4, -11, 0, 0, 1, -2, 10, 2, -4, -9, 2, -3, -13, 1, 9, -7, 12, 8, -2, -5, -6, -11, -9, 2, 3, -11, -6, -8, -9, 1, -13, -23, -1, -23, -5, 5, -5, -15, -7, 5, 6, 4, 3, -2, -19, -5, 2, -4, 10, 1, -4, 0, 0, -7, -7, 0, 15, 0, 0, -3, -3, 6, 14, -2, -2, 23, -9, -26, -10, -9, 13, -1, -10, -5, -4, -5, 1, -13, -8, -13, -14, -15, -12, -9, -6, -4, 21, -10, 1, -8, -8, -7, -9, -7, -7, -15, 0, -10, 7, -15, -2, -7, -4, -8, 2, -11, -9, 0, -5, -11, -7, -7, 4, 3, 1, -2, -5, -17, -7, -3, -13, -5, -8, -2, -16, -13, 11, 4, 10, -21, 1, 9, 11, -18, -16, -10, -13, -6, -10, -4, -3, 3, -5, -11, 3, -18, -21, -6, -6, -12, -13, -12, -20, -4, -2, 2, -16, 6, 9, -8, -5, -47, 0, -7, -5, -2, -8, -8, -17, -3, -4, -7, -11, -10, -7, -24, -8, -6, 6, -7, 1, -13, -1, -11, -3, -6, -8, 2, -3, -10, 12, -10, 7, -9, 14, 2, 8, 6, 25, 12, -5, 6, 8, -1, -10, -5, 8, 11, 22, -7, 7, 13, 5, -6, 9, 3, 6, -5, -3, 5, 5, 5, 1, -6, -4, 25, -11, -7, -13, -7, -6, -3, -9, -5, -2, -9, -14, -4, 12, 13, -12, 9, -34, 11, -6, 11, 8, 5, -11, -3, 0, -14, 4, 21, -12, -7, 4, 24, 4, 4, -5, 1, 1, -8, 3, -10, 3, -9, -5, -5, -2, -18, -3, 6, -3, 2, -2, 1, 6, -6, -3, -5, -11, -7, -1, -9, -12, -16, -5, -21, -5, -7, 0, -9, 7, -4, -12, -2, -7, -9, -7, 3, -6, 2, 8, -27, 11, 10, 0, -6, -6, -3, 7, -1, -3, 3, -3, 3, 9, -13, -3, -2, -15, -1, -6, -4, -18, -1, 0, -3, -6, -8, -15, -6, -2, -28, 2, -30, -11, -14, 4, -4, -12, -9, -4, -9, -3, -5, -13, 5, 0, -40, 3, -22, -13, -11, -3, -10, -5, -3, -10, -12, 5, -7, -2, 4, 9, 0, -21, -5, -12, -6, -7, 7, -7, 0, -3, 3, -4, 4, -4, -3, 4, 0, 5, -4, 6, 1, -3, 0, -37, 5, 4, -7, 3, -1, 2, 2, 10, -9, 12, -27, 2, -4, -3, 0, -23, -1, 1, -6, 1, 2, -9, 3, -2, -15, 0, 5, -7, 3, 6, -12, 10, -6, -1, -9, -3, -6, 3, 4, -10, -25, -14, -2, -5, -4, 3, 2, -14, -2, -2, 4, 2, 2, -2, -5, 10, -2, 0, -2, 4, 8, 2, 5, -1, -5, 12, -7, -2, 1, -10, 13, 11, 6, 6, 19, -1, 8, -3, 0, 9, 0, -1, -2, -5, 0, -3, 5, -6, -24, -18, -7, -15, -11, -12, -4, 18, 0, -6, 8, -10, -10, 3, 0, -1, -30, 1, -16, -5, -10, 2, -11, 10, -5, -8, -2, -6, -3, -11, -1, -7, -20, -3, 1, -12, -11, -6, -6, -22, 6, -9, 5, 0, -5, 0, -11, 13, -2, -2, -9, -5, 5, -2, 1, -26, 0, 1, 1, -5, -11, -3, 0, -18, -35, 3, -6, -12, 1, 2, 0, -18, 4, -1, 2, 3, 0, -19, 0, 1, -27, -23, -25, -2, 6, 1, -9, -12, -2, -8, 8, 0, 5, -23, -1, -10, -5, 4, -5, -1, -2, 5, -5, -6, 0, 5, 7, 3, 4, -6, 0, 1, -29, 10, -12, 6, -7, -5, 0, -35, -1, 3, -1, 5, 4, -1, 5, -6, -2, 19, 2, -4, -6, -4, 0, -16, -5, -3, -10, 2, 0, 1, 6, 15, -30, -21, -22, -10, -11, -12, 4, 13, 5, -9, 7, -2, -7, -2, -7, 13, 5, -9, -15, 0, -2, 7, 17, -5, 12, 4, 6, 1, 1, 0, 9, 5, 10, -1, 12, 3, 7, -1, 8, -23, -2, 6, 4, 3, -5, -2, 4, 1, -19, -1, 2, -6, 4, -1, 5, -8, -1, -10, -2, -6, -4, 2, 5, -6, -25, -14, -10, -1, -9, 3, 0, 29, 1, -2, 6, -4, -7, -4, 16, 9, 1, 5, -25, 0, 5, 1, -1, 4, 2, -5, 1, 0, -9, -9, 13, 1, -19, -3, 22, -18, -11, -7, 2, -21, 1, -20, 4, -6, -9, -12, -3, 2, -21, -7, -14, -5, -4, 12, 2, -22, -3, -8, -2, 6, -2, -2, -3, 0, -45, 0, -25, -3, 3, 9, 4, -12, 3, -16, 7, 0, -20, -26, 10, 0, 8, -9, -40, 3, 5, 3, -6, -26, 6, -1, 4, 4, 9, -12, 6, -10, -40, 12, -3, 21, 13, 15, 0, -20, -1, -2, 6, 9, 10, 3, -11, 19, 3, 25, -8, 12, 11, 13, -10, -16, 6, 11, 3, 17, 13, 9, 3, 9, -49, -10, 1, -7, -9, -6, -6, 6, 5, 2, -5, 4, -3, 12, -13, 12, 6, -23, -22, -9, 8, -12, -2, -1, 11, -6, 13, -3, 2, -19, 7, 6, 10, 13, 16, -14, 13, 1, 3, -21, -1, 9, -2, 3, 3, -1, 1, 5, 1, -13, -3, -11, -4, -13, -7, 4, 4, 5, -5, -6, -9, -13, -4, -10, -12, -13, -2, -11, -1, -23, -6, -25, 1, -4, -3, -2, -5, 0, 3, -12, -17, 11, -8, 4, -15, -3, -7, -8, -4, 10, -5, 0, 0, 2, -6, -2, -23, -10, -7, -20, -5, -2, 2, -15, 4, -1, -8, 3, -10, -11, 1, 8, 6, -8, -6, 3, -4, 3, -4, -16, 11, -7, -1, 2, 0, -1, 3, -1, -9, -1, -6, -13, 0, 5, 2, -35, 10, -13, 9, 2, -7, -34, 6, 0, -26, 6, -2, -5, 17, 6, 3, -27, -2, -13, 11, 2, 8, -24, 14, 4, -9, -8, 3, -5, 12, 8, 10, -88, 4, -4, 6, 8, 10, -16, 9, 3, -17, 13, 16, 3, 20, 10, 2, -52, 5, 10, 9, 13, 0, 6, 2, 10, -20, 3, 2, -4, 3, -10, -3, -13, 8, -1, -11, 1, -2, -1, -2, -3, -24, -18, -31, -14, 4, -4, -10, 10, 6, -10, 3, -2, -10, -14, 7, 0, 21, -9, -8, -7, 0, -9, 11, -56, 4, -6, -1, -3, -8, -20, 15, -10, -17, -13, 25, -27, -3, -1, 3, -21, 10, 2, 5, -3, -3, -4, 6, 2, -2, -16, -3, -9, 10, 0, -12, -47, 8, -8, 8, 2, -6, -19, 10, -5, -22, -9, -13, -3, 0, 4, 1, -40, 4, -15, 5, 4, 1, -2, 13, -15, -12, 1, -8, 12, 20, 12, -15, 3, -1, -1, 6, -4, 4, -6, 3, 0, -8, 4, 9, -10, -10, -8, -5, -17, 8, -5, 6, -8, 3, -4, -4, 8, 3, 1, 6, -22, -7, -5, 1, -28, 5, -7, -3, -6, -17, 13, -5, -1, -16, -14, -7, -24, -7, -6, 5, -7, 14, -15, 3, -11, -6, -12, 1, 9, 0, -5, 5, 10, 0, 14, 3, -23, 5, -4, 14, 0, 7, -14, 7, 6, -2, 10, 9, 8, 9, -5, -6, -27, 4, -8, 9, 5, 2, -10, -4, 4, -23, 5, -22, 7, 6, -1, 3, -1, 4, -5, 2, 3, -1, -22, 10, 2, -16, -21, -9, -13, 4, -6, -2, -30, 8, 1, 2, -4, 2, -16, 12, 9, 11, -14, 16, -30, -6, -3, 5, -26, 13, -12, 4, 2, -7, -6, 13, -2, -10, -4, 3, -26, 10, -4, 1, -23, 6, -8, 4, -2, -13, -15, 9, -15, -34, -22, 1, -9, 2, 1, -5, -18, 7, -8, 4, -7, -2, -28, 15, -15, -18, -14, -16, -3, 4, -5, -6, -6, 9, -10, 6, -5, -8, -25, 4, -20, -27, -3, -10, -17, 13, -2, 10, -22, 13, -17, -1, -1, -14, -13, -4, -6, -19, -12, -21, -1, 2, -2, 11, -27, 10, -39, 3, 2, -9, -14, 2, -16, -14, -14, -6, -9, -6, 10, -2, -6, 10, -20, 13, -1, -13, -27, -3, -6, -3, 3, -11, 2, 13, -1, 3, -127, 22, 14, -3, -10, -6, -33, 14, -6, -28, 0, 10, 
  -9, -3, -8, 4, -8, 11, -21, 3, 4, -2, -6, 21, -16, 6, 13, 5, -1, 2, 2, -1, -9, -4, 0, -7, 0, -6, 0, -2, 14, -4, 11, -10, 4, 8, 4, -5, -16, 2, 6, -2, 5, 0, -1, -11, 1, -7, 5, -2, -8, -3, -3, -11, 18, 2, -3, -9, -4, -7, -5, -18, 13, 1, -12, -10, 2, -7, -8, -4, 3, 7, 17, 7, 2, -1, -5, -4, -2, 6, 19, 4, -8, -2, -4, -2, 26, 4, -13, -2, 0, -1, -9, 5, -12, 4, 12, 3, -7, -3, -5, -12, -4, 4, -34, -5, -8, -16, -6, 5, -5, -15, 5, -9, -15, -2, -12, -12, 2, -2, -13, -3, -7, -14, -6, 0, 17, 2, -3, -25, -1, 7, 1, -3, -10, -3, 3, -7, -11, -13, -12, 5, -14, -15, -2, -9, 24, 1, 15, -10, -3, 2, -17, 7, -3, 10, -2, -3, 9, 2, 16, -25, 0, 2, -1, -8, -27, 10, -35, 0, -13, -16, -20, -3, 14, 9, 12, -12, -3, -16, -7, -10, -13, 7, -11, -9, 4, -16, 2, 0, 2, -24, -4, -34, 6, 3, -1, -12, -1, 8, -21, 2, -6, -12, -12, -8, -5, -3, -4, -13, 21, -3, 20, -3, -12, 0, -6, 1, -2, 0, -7, 9, -8, -13, 13, -25, 7, -2, 6, -15, -3, 1, -37, 7, 14, 8, 1, -4, 14, -9, 3, -24, -11, -8, -3, -15, -7, 6, -15, -4, -1, -1, -3, -9, 4, -8, -15, -2, -7, -10, -2, -12, 4, 6, -4, 0, -12, -1, -13, 2, -1, 1, 22, -8, 1, -6, -1, 8, 2, 9, 5, -1, -3, 5, -2, -3, 11, 6, 16, 6, 6, -2, 2, -7, 4, 9, 9, 0, -14, -10, -21, -2, -9, -1, 2, 6, 4, -8, -8, -15, -3, 4, -20, 4, -7, -7, 5, -7, -1, -1, 10, 2, -11, -5, -5, -8, -5, 2, -22, 4, 3, -8, -3, 6, -6, -14, -3, -18, -4, -13, 3, 3, 1, 3, -37, 2, -5, -14, -5, -4, -10, -2, -6, -21, 2, -3, 5, -8, 14, 6, -29, -3, -10, -10, -17, 4, -21, -6, 10, -20, 11, -7, 2, -4, -22, 9, 9, 2, -7, -1, -3, 6, -2, -3, 7, 5, -8, -4, -8, -6, -8, 6, -13, 0, -18, -18, 4, -2, -16, -11, -20, -6, 1, 1, 5, -1, -4, -5, -27, 4, -1, 4, -11, -1, -23, -14, 8, -27, 19, 13, 20, -3, 3, 3, -17, 9, 13, 16, 0, 1, 15, 3, 3, -2, 11, 6, 8, -17, -5, -2, -25, -4, 16, 17, -9, -12, -1, -1, -3, -8, -4, -11, -4, -12, 10, 13, -1, 4, -3, -9, 0, -7, 17, 10, 2, 1, 8, -3, 11, 7, 6, 5, 25, 4, -10, -13, -2, 2, -8, 2, 14, 20, 8, -2, 2, 0, 24, 1, 1, 6, -3, -14, -20, -7, 10, 4, 4, 14, -3, 4, 3, -5, 19, 5, -24, 6, -1, -8, -8, -4, -11, 5, 5, -1, -3, -1, -4, 0, 4, -2, -1, 2, 4, -12, -7, 9, 3, -11, 2, -3, 2, -6, -3, -2, 3, 4, -9, -3, -6, -11, 0, -4, -3, -6, 4, -5, 12, -1, 3, -1, 4, 6, -11, 7, -4, -15, 7, 0, -11, -3, 9, -28, -5, 3, 1, -15, -11, 8, -3, 2, -6, -7, -19, 9, -7, 0, 11, 2, 0, -1, 4, -2, -17, -4, -30, -8, -3, -22, 0, 9, -9, -18, 1, -17, 14, 5, 11, -9, 4, 3, 11, -3, -8, -9, -19, 2, 8, 5, 8, -4, 9, 17, 12, 6, -13, 11, 12, 11, 15, 11, 1, 4, 4, -12, 6, 5, 16, 3, 12, -12, 3, 1, -14, -5, 4, 10, 1, -2, 3, 3, 16, 14, 3, -13, -3, -17, 0, 4, -2, 2, -3, 7, -7, -11, 7, 3, 14, 3, -7, -3, -4, 5, -18, 7, 14, 6, 1, 1, -17, 8, -3, 1, 5, 0, -5, 1, 8, 7, 19, 2, 7, -6, 5, -4, -5, 10, 5, -8, 1, 13, -9, 3, -7, 0, 8, 10, -27, 2, -2, -9, -8, 9, -2, -10, -14, -1, -9, 1, -5, -2, 10, 3, -24, 4, 0, -7, -1, -1, -4, 4, 5, -12, -8, 0, -2, -3, 19, 9, -6, -2, -5, -12, -11, 4, 2, -4, -1, 16, -3, -5, 3, 3, -12, -7, 2, 10, -3, 4, -17, 0, -12, -13, 9, -7, 13, 11, 10, -5, 9, 1, -7, -1, -3, 2, -5, 5, 5, 6, 11, -1, 18, -4, 3, -10, -8, 0, -4, -9, -6, 6, -24, -11, 3, 7, 5, 3, 4, 6, 3, -3, -2, -8, -16, -6, -2, -8, -8, -15, 5, -8, -3, -6, 10, 19, 9, -24, -14, -8, 15, 5, 6, 17, -17, 8, -1, -4, 3, 10, 21, 6, 9, 0, -5, 0, 6, 2, 1, 13, 1, -10, 2, 6, -17, 9, -3, -7, 6, -9, -7, -4, -31, 2, 4, 6, -11, -2, -11, -22, -11, -7, 0, 4, -11, -3, 3, -3, -9, 4, -2, 8, -14, 8, 6, 6, 1, -10, 7, -1, -4, 0, -7, -3, 10, 4, -1, 1, 1, 2, 11, 1, 9, 11, 15, -7, 1, -2, 7, 1, -18, -4, -8, -11, -7, -6, -3, -11, 7, -18, 14, 7, 3, -10, -15, 4, -33, 6, -6, -6, -18, -7, 1, -2, 5, -24, -11, 4, 1, -5, 3, 1, -35, -1, -2, -8, -20, 9, 1, -4, -5, 0, 3, -6, -3, -5, 8, 6, -26, 5, -4, -3, -13, -5, 0, -4, -1, -23, 6, -1, 12, -3, -19, 8, -2, 5, -9, -3, 0, 8, 9, -4, 7, -6, 7, 4, -1, -6, -7, 8, 3, 10, -6, -9, -35, -1, 10, 8, 10, 0, 5, 12, 1, -1, -25, 9, 12, -3, -1, -10, -14, 5, 1, 9, 7, 12, 9, -3, -3, -3, -6, -6, -8, -9, -11, -14, -16, -6, -11, -3, -9, -7, 1, -12, -1, 0, 6, -2, 1, 2, -3, -5, -1, -9, -8, 8, 9, 5, 10, -5, 4, -7, -23, 0, -9, -1, 0, -2, 3, -12, -18, -6, -2, -13, -6, 0, -4, -13, 12, 7, -16, -1, -3, -10, -9, -14, 9, -1, -3, -11, 2, -7, 2, 6, -12, 3, 7, 8, 6, 0, -17, 0, 4, 18, 10, 10, 7, 2, 5, 2, -22, 12, 8, 13, 15, 7, -8, 0, 8, 6, 15, -8, 11, 5, 4, 7, 2, 5, -12, 1, 1, 5, -12, 5, -13, -12, -4, 6, -5, 7, -10, 2, -8, -8, -19, 5, 3, -5, -21, 6, 9, 0, 2, -8, -16, -6, 0, 0, 24, 5, -13, -4, -6, -14, -2, -1, -4, 7, -1, 4, 5, 0, -10, -4, -11, -5, -10, -2, -5, -19, -21, 3, -7, -15, -2, 2, 6, -7, 10, 4, 3, -6, -16, -2, -1, 0, -5, -13, 0, -1, 1, -9, 16, 2, 8, -3, -17, 2, -2, 2, 0, 9, -26, -3, -1, -11, 4, 2, 1, -7, -9, 0, -6, -4, -5, -7, -3, -3, -22, -2, 5, 4, -9, 1, 9, 4, 6, -3, -5, -1, -12, 2, 3, 14, -7, 4, -7, -3, 1, -8, -9, 9, 21, 2, -18, 1, -12, 4, 5, -2, -16, -12, 7, -1, -6, -3, -4, 1, -4, -7, -18, -1, -48, 2, 5, 3, -5, -14, 6, -27, -5, -8, -11, 2, -2, -2, 1, 3, 0, 2, 7, -8, -10, -4, 23, 19, -14, 7, -5, 3, 1, -7, -5, 5, 12, 8, 0, -13, -15, 4, -1, 0, 4, 10, 2, 8, 5, 8, -6, 4, -8, -4, -4, -11, -21, 9, -7, 5, -3, -4, -3, 4, 3, -2, 11, -4, -23, 8, -3, -7, -18, 0, 2, -5, 4, -8, 2, 0, 8, -2, -3, 6, -13, 3, 6, -21, -9, 4, 1, 0, 6, 7, -5, -1, -3, -4, 16, 2, -15, -1, -7, -10, -4, 1, 9, 15, -3, -2, 9, -10, -7, 1, 13, -4, -12, 2, -8, -7, -5, -5, -12, -4, 20, -5, 15, -5, -8, -11, -7, 10, 9, 8, 6, 6, -40, -8, 21, 15, 12, 7, -2, 4, 2, -12, -8, 7, -4, 4, 2, 5, -14, 3, -14, -4, 8, 15, 12, 7, 7, 8, -26, 2, -32, 7, -1, -13, -33, 2, -7, -1, 2, 1, 
  -4, -8, -5, -9, 19, 1, 18, -3, -7, -5, 4, 2, -2, 8, 3, 9, -1, -15, 0, -7, 15, 0, 13, -3, -10, -6, 2, 6, -7, 28, -3, 16, -6, -1, -11, -5, 6, 0, 11, -8, -5, -12, 14, 8, -10, 4, 0, 7, 4, -12, 11, 5, -12, -11, 0, 1, -3, -4, 6, 1, -14, -11, -4, -1, 4, 0, 11, -5, -3, -9, -5, -3, 0, 2, -2, -3, -1, -10, -3, -24, 8, 8, 5, -5, 2, 2, 8, 7, 1, -1, 8, -13, 2, 1, -8, -1, 10, 0, 0, 3, 3, -4, 14, 0, 0, -3, -3, -6, 0, 10, 1, -3, 11, 1, 4, -2, 3, 0, 7, -5, -2, 4, 4, -6, -1, 8, 12, 16, 4, -6, -2, -7, 4, -3, 2, 0, -7, 3, 7, -4, -3, 12, 1, 0, -5, -5, -13, 2, 10, 0, -7, -6, -5, -4, 4, 2, -11, 9, -7, -1, -4, -6, 3, 6, 15, 0, 12, -2, 2, -7, 11, 5, -9, 6, -5, -5, -3, 3, -3, -2, 12, 9, 0, 4, -1, 2, -1, 6, -5, 13, 16, -11, 8, 1, 3, 2, 9, 4, 5, -1, -1, -7, 10, 16, 0, 5, 12, -9, -7, -1, -5, 0, 11, -3, 21, -2, -7, 1, 4, 1, 3, 10, 6, 18, -5, 0, -9, 6, 9, 4, 25, -7, -3, -4, 13, 4, -11, 8, -10, 11, -1, -8, -13, 9, 0, -8, 3, -7, -8, 0, 9, 2, -17, -8, -4, -11, -3, 0, -7, 1, 10, -6, -2, 0, -4, 1, 10, 1, -5, -8, -6, -33, 6, 13, 10, 2, -5, -9, 11, -2, 0, 5, 0, -2, 9, 2, 3, -13, 20, 9, 4, -8, -8, -5, 8, -3, 0, 7, 3, -2, 9, 8, 9, 7, 3, 7, -6, 1, -5, -5, 15, -5, 0, 9, 3, 4, 4, -3, -9, 3, -3, -2, 1, -2, 20, -4, 2, -6, -1, 7, 15, 6, -5, -2, 0, 1, -4, -6, 1, -1, 3, -5, -1, -2, 5, -2, 14, -3, 2, -9, -1, -11, -10, -8, -11, -8, 15, -1, -5, -8, -1, 2, 6, 1, -7, -9, -4, -4, -2, -11, 4, -1, 11, 6, -6, -2, -1, -4, 10, 0, 1, 5, 8, -22, 17, 6, 4, -4, 11, 5, 1, 3, -1, -1, -3, -8, 15, 14, -5, 4, -7, 2, -2, -4, 3, 9, 11, 8, -5, 1, -13, 3, -7, 14, 8, 6, 5, 11, -3, 8, -21, 8, 19, -3, 4, -4, -6, 18, -1, -6, 9, 26, -10, 0, 1, 10, -4, 3, 16, 0, -5, -9, -6, 8, -12, -16, 0, 18, -4, -2, 2, 0, -17, -6, 1, 0, -9, 2, 7, -2, -11, -4, -6, -19, 5, 5, 6, 0, -13, -1, -13, 5, 5, 2, -2, 4, 8, -4, 4, -24, 9, -2, 9, -1, -30, 2, 7, 5, 3, 13, -2, 4, 2, 7, 2, 1, 4, 3, -1, 1, -30, -2, 5, 2, 2, 4, 11, 1, 3, -7, 2, 3, 8, 1, 1, 2, -21, 2, 16, -2, 3, 4, -3, 8, -1, 18, 1, 8, 7, 1, 4, 5, -24, 0, 0, 3, 0, 9, -1, 0, -2, -13, 0, -6, -5, 6, 2, 4, 2, 3, -6, -3, 3, 3, 3, 7, 8, 1, -1, -11, -2, 4, -9, 10, -6, 5, -2, -5, 6, 2, 6, 5, -1, -2, -1, -8, -4, 6, 1, 0, 6, 7, 9, 8, 2, 0, -9, 3, 3, 23, 7, 11, -1, 9, 5, 4, -26, 7, 6, 12, -1, 1, -8, -1, -3, 20, 7, 12, -2, 3, -3, 3, -6, 6, 9, 1, -1, 0, -1, 6, 9, 22, 9, 13, -10, 1, -11, 7, -7, 5, 11, 3, -6, -7, -6, 7, 1, 13, -9, 7, -10, 1, 5, 3, 7, 0, 7, 1, 1, 0, 7, 2, -8, -3, -12, 15, 2, -4, -2, -10, 2, -4, -10, 0, -8, -13, 6, -2, -11, -8, 8, -19, 3, 2, -2, -4, -27, -3, -4, 4, -1, 4, 0, -3, -1, 7, -2, -9, 6, 12, 1, -5, -17, 3, 7, -1, 2, 11, 9, 1, 3, 15, 21, -3, 2, -1, -3, 6, -1, 1, 15, -4, 0, 8, -5, -4, 15, -5, 0, 18, 5, 0, 5, 1, -23, -6, 1, 9, 3, 4, -3, 3, -2, 2, 8, -11, 3, 8, 1, 11, -21, -2, -9, 2, 6, 2, 7, 0, 10, 5, -1, 15, -5, -5, -4, 0, -17, 3, -2, 1, 1, 3, 3, -5, 6, -7, 2, -15, -5, 2, -1, 1, 5, 9, 5, 1, 7, 2, 8, 11, 12, 9, -3, -5, -4, 4, 11, 4, -14, 6, 5, 3, 0, 1, -2, 5, -5, 15, 5, 16, -4, 2, 7, 2, 3, 12, -10, 6, -2, -2, 1, 1, -4, 12, 14, 11, -8, -7, -11, 10, -1, 6, 7, -1, 3, -8, -7, 13, 7, 14, 16, 3, -6, 11, -2, 8, -9, 5, 20, -4, -3, -10, -5, 6, -6, 3, 5, 19, -8, -8, 1, 3, -9, 4, 0, -6, -16, -9, 12, 1, 0, -9, 2, -13, 5, 5, 4, 0, -9, 1, -9, 3, 0, -8, -6, 4, -8, -1, 8, -11, 1, 7, 8, -5, -19, -3, 18, -1, 5, 2, 1, 11, 8, 2, -8, 9, 1, 5, 2, 13, -2, -6, 3, 0, 3, -4, 6, 10, -2, -8, 3, 15, 11, 6, 0, 2, -6, -5, 8, 0, 6, 7, 1, -6, 3, 11, 14, -7, -8, -1, 4, 0, -4, -3, -4, 4, 5, 2, 9, 2, 7, -6, 5, 13, -1, 14, -1, -2, -1, -1, -10, 1, 4, 4, -9, 7, 6, -7, -1, -3, -10, 10, 0, 0, -7, -3, -8, -8, 1, -4, 7, 2, -5, -2, -5, 10, -6, -6, -3, 10, -1, 0, 8, -4, 4, 2, -7, 2, 1, 9, 14, -7, 5, -8, 16, 9, -12, 8, 30, 8, -3, 6, -5, 10, 14, 14, 15, 18, 0, 15, -5, 4, -18, 3, 13, 2, 8, 6, 4, 4, 7, -6, 11, 5, -5, -1, -5, 3, 10, 8, 14, -4, -1, 1, -6, 11, 11, 23, 3, 19, 0, -9, 0, 2, -8, 1, 5, -6, -8, -4, 1, 16, -20, 14, 4, 10, 5, 4, -2, 0, -10, 6, -11, -4, -7, -11, 6, 14, -1, -15, 7, -19, -3, 16, 1, 3, -11, -1, 2, 0, -6, 2, -2, 5, 5, 6, -2, -2, 4, -2, 6, -8, -9, -8, 9, 5, -4, 4, 6, -3, 3, 2, 18, -6, 13, -2, 9, 2, -6, 1, 12, 0, 2, 12, 1, 3, 3, -3, 10, 3, 8, 6, 6, 8, -1, -4, -4, 8, 7, 13, 8, 1, 12, 4, -4, 7, -1, 7, 0, 5, 14, 4, -10, 2, 0, 5, 14, -2, 3, 4, 1, 1, -9, 1, -6, 5, -4, -2, -9, 3, 4, -3, 5, 10, -6, -3, 5, -3, -12, -3, -10, 9, 21, -1, 1, 1, -4, -3, 6, 6, 4, 20, 2, -3, 8, 3, 10, 2, 2, 5, 6, 1, 0, -2, -7, 9, 3, 6, 17, 3, -1, 16, 4, 12, -17, 7, 26, 11, 1, -5, -6, 5, -7, 22, 8, 15, -3, 3, -10, 0, -9, 6, 22, -2, -5, 3, -1, 2, -3, 5, 12, 14, 0, 7, 4, 4, -7, 1, 35, 1, 8, -2, 3, 8, -9, 17, 6, 23, 8, -4, 2, 1, -10, 1, -2, 3, -5, -3, -2, 0, -19, -19, 10, -2, 1, 5, -1, 1, 0, -8, -5, 4, 2, -2, 1, 3, 1, -14, 9, -25, -1, 5, 4, -8, -15, -2, 21, -1, 8, 7, 8, 3, -5, 0, 2, -6, 0, -2, 5, -3, -18, -1, 18, -3, 0, 1, 7, 1, -3, 0, 2, 3, 7, 8, 3, 12, -14, 2, 0, 9, 1, 12, -13, -4, -3, 13, -1, -3, 0, 5, 4, 11, -24, 4, 8, 2, 12, 12, 3, 9, 7, -5, 0, -6, -10, 1, 4, -1, -10, 1, -1, 4, 5, 3, 10, 10, 5, 4, -4, -9, -2, -6, 0, 2, 4, -1, -6, -3, 0, -1, 18, 11, 4, 8, -4, -9, 2, -3, -9, 11, -19, -1, 1, 4, 0, -4, 2, 3, 0, 6, 0, 14, -5, 4, -2, -7, -9, -10, 20, 0, -7, -5, 8, 6, -7, -12, 10, -2, 
  6, 17, 9, 18, -16, -1, -8, 10, 6, 7, -13, 10, -3, -15, -2, -1, 1, 9, 5, 24, -19, -2, -2, 7, 8, 8, -7, 12, 9, -20, -8, 2, -5, 7, 2, 22, -30, 2, 1, 10, 8, 6, -2, 10, 2, -20, -10, -1, -4, 10, 2, 20, -21, 2, -14, 8, 13, 3, -16, 11, 0, -25, -17, -11, -8, 10, 0, 19, -20, 0, -17, 6, 10, 6, 3, 17, 7, -28, -18, -10, -11, 2, 9, 24, -32, 7, -7, 3, 7, 0, 0, 22, 7, -27, -4, -11, -10, 11, 0, 21, -10, 8, -14, 9, 12, 7, 0, 27, 10, -15, -9, -9, -17, 6, 2, 11, -29, 4, -3, 3, 6, 2, -7, 20, -5, -25, -7, 9, -9, 8, 4, 16, -23, 9, -8, 0, 9, -3, 2, 11, 2, -13, -11, -8, -14, 8, 3, 16, -19, 9, -6, 8, 10, 0, -15, 19, 11, 0, -4, 1, -4, 15, 0, 24, -26, 5, 10, 2, 6, 3, -9, 11, -1, -6, -5, 41, 0, 8, 0, 11, -23, 0, 14, 9, 1, 1, -15, 7, 4, 2, -8, 18, -7, 10, -1, 15, -26, 4, 1, -1, 6, 1, -2, 4, 2, 7, -7, 5, -6, 1, -1, 11, -14, 1, -6, 4, 3, 4, 1, 7, -2, -7, -10, 0, -4, 2, 2, 8, -27, 7, -2, 9, 9, 3, -5, 8, 3, -6, -3, 7, 1, 6, 4, 14, -21, 7, 4, 0, 11, 2, -5, 9, 10, 12, -1, 34, -13, -1, 2, 26, -22, 4, 1, -3, 5, 6, -2, 1, -1, -11, -12, 14, -13, -3, -10, 10, -14, 6, -11, 5, 0, 3, 3, 5, -6, -15, -23, -5, -12, -1, -6, 11, -10, 3, 0, 3, 3, 4, -4, 10, -3, -20, 2, -4, -8, 4, 1, 14, -18, 3, 1, 11, 3, 1, 4, 21, 8, 8, 3, 9, -7, 9, 3, 17, -25, 9, -1, 6, 10, -1, -9, 22, 4, 9, 12, 24, 3, 16, 3, 18, -22, 5, -1, 12, 4, 6, -8, 16, -1, 20, 10, 13, 0, 15, 1, 16, -29, 5, 5, 12, 10, 6, -13, 13, 6, 15, -2, 22, -10, 13, 2, 23, -38, 11, 6, 13, 2, 3, -15, 5, 2, 4, -10, 45, 4, 14, 15, 24, -35, 13, 7, 16, 7, 15, -9, 27, -3, 17, 49, 12, 38, 21, 26, 26, -10, -3, 26, -8, 29, 13, 30, 25, 40, -20, -6, 64, -31, -51, -27, -9, 33, -14, -12, -25, -11, -10, 10, -27, -26, -34, -22, -39, -27, -42, -30, -10, 23, -18, -15, -33, -13, -12, 10, -27, -15, -41, -32, -40, -21, -39, -32, -16, 18, -14, -16, -37, -9, -12, 13, -29, -18, -45, -37, -26, -34, -44, -40, -7, 12, -15, -17, -31, -15, -4, 12, -30, -19, -36, -39, -62, -33, -35, -32, -11, 20, -16, -4, -32, -12, -7, 2, -25, -14, -37, -45, -32, -26, -34, -29, -11, 27, -10, -11, -27, -6, -6, 8, -14, -10, -27, -32, -31, -22, -36, -28, -2, 8, -16, -19, -33, -7, -9, 10, -13, -23, -41, -29, -36, -21, -34, -30, -8, 11, -14, -17, -25, -8, -11, -2, -20, -17, -24, -33, -37, -21, -31, -23, -6, 6, -20, -14, -31, -11, -10, 4, -26, -25, -41, -27, -37, -18, -23, -21, -13, 9, -20, -3, -26, -7, -9, 4, -12, -12, -19, -28, -30, -19, -21, -20, -2, 28, -14, -10, -22, -6, -2, 8, -17, -10, -21, -29, -26, -21, -23, -15, -9, 24, -8, -3, -27, -9, -6, 6, -19, -16, -21, -26, -29, -18, -17, -20, -6, 22, -9, -7, -27, -6, -1, 3, -17, -21, -35, -16, -31, -17, -30, -19, -5, 15, -16, -7, -28, -4, -11, 12, -12, -11, -26, -32, -18, -24, -32, -30, -4, 23, -14, -6, -33, -7, -7, -2, -17, -20, -29, -29, -34, -23, -40, -21, -7, 11, -16, -10, -24, -3, -8, 12, -22, -9, -52, -25, -26, -18, -34, -31, -6, 14, -19, -6, -23, -8, -10, 3, -22, -9, -23, -28, -33, -19, -28, -28, -8, 22, -19, -10, -32, -9, -10, 9, -20, -12, -35, -25, -17, -19, -32, -23, -8, 9, -11, -3, -22, -10, -5, 1, -16, -15, -27, -24, -21, -16, -23, -25, -5, 14, -15, -5, -27, -6, -4, 7, -17, -13, -36, -34, -34, -27, -29, -30, -13, 24, -9, -17, -27, -13, -14, 2, -16, -17, -27, -27, -42, -23, -38, -33, -4, 21, -11, -19, -25, -13, -8, 3, -13, -15, -32, -30, -29, -20, -28, -22, -9, 11, -12, -7, -27, -4, -4, -1, -20, -12, -29, -30, -15, -22, -30, -23, -2, 10, -15, -5, -21, -6, -5, 1, -15, -9, -31, -24, -26, -10, -29, -19, -3, 2, -13, -9, -24, -4, -3, 10, -12, -12, -34, -19, -19, -14, -24, -21, -7, 20, -12, -10, -31, -10, -9, 7, -15, -19, -33, -33, -23, -22, -33, -18, -8, 6, -13, -11, -26, -5, -9, 1, -20, -11, -27, -33, -24, -32, -35, -22, -2, 8, -17, -13, -26, -8, -6, 1, -15, -18, -41, -24, -40, -19, -32, -25, -7, 9, -9, -19, -26, -4, -6, 16, -20, -16, -41, -35, -47, -19, -22, -24, -8, 3, -16, -8, -22, -5, -8, 6, -19, -14, -26, -26, -31, -19, -24, -19, -4, 11, -9, -8, -23, -5, -9, 3, -15, -10, -15, -21, -32, -20, -22, -17, -13, 7, -12, -7, -23, -4, -6, 11, -16, -13, -20, -24, -21, -21, -19, -21, -7, 5, -14, -6, -18, -6, -7, -2, -16, -11, -20, -21, -17, -19, -17, -20, -9, 14, -7, -3, -20, -5, -11, 13, -17, -17, -28, -21, -18, -14, -30, -23, -2, 10, -10, -8, -16, -7, -3, 3, -15, -11, -32, -26, -30, -16, -26, -20, -6, 21, -9, -4, -24, -10, -9, 12, -15, -11, -34, -34, -35, -14, -19, -19, -1, 1, -11, -7, -24, -6, -9, -7, -11, -6, -27, -24, -25, -15, -33, -19, 1, 11, -12, -12, -19, -7, -7, 0, -23, -17, -33, -26, -27, -16, -21, -23, -5, 8, -10, -10, -26, -3, -3, 0, -17, -7, -41, -29, -45, -24, -28, -28, -3, 8, -19, -9, -28, -5, -2, 4, -22, -8, -48, -30, -33, -24, -24, -20, 4, 9, -14, -11, -19, -4, -3, 7, -17, -13, -28, -43, -47, -27, -33, -22, -4, 14, -18, -22, -22, -6, -12, 4, -18, -25, -44, -37, -32, -15, -29, -25, -1, 3, -9, -9, -23, -9, -11, 13, -22, -18, -27, -26, -35, -25, -30, -25, -3, 9, -8, -9, -18, -8, -3, 15, -18, -10, -21, -23, -29, -15, -26, -21, -6, 0, -10, -2, -23, -4, -8, -3, -10, -10, -30, -25, -22, -11, -16, -20, -5, -1, -7, -5, -22, -7, -4, 5, -17, -12, -13, -20, -23, -19, -28, -21, -2, 4, -10, -8, -24, -2, -5, 11, -16, -13, -25, -20, -37, -25, -29, -24, -10, 11, -15, -8, -29, -12, -9, 6, -20, -15, -24, -28, -19, -21, -39, -22, -11, 16, -18, -5, -27, -11, -7, 18, -23, -22, -15, -25, -25, -30, -33, -23, -8, 5, -7, -9, -26, -6, -2, 7, -22, -15, -25, -21, -26, -12, -30, -16, -8, 0, -11, -17, -18, -4, -10, 12, -18, -16, -37, -27, -43, -19, -31, -17, -6, 7, -15, -17, -19, -7, -3, 7, -22, -18, -39, -25, -42, -25, -24, -23, 3, 15, -11, -16, -21, -12, -2, 5, -15, -10, -40, -27, -29, -19, -28, -17, -3, 12, -20, -12, -23, -7, -5, 7, -16, -13, -35, -34, -32, -18, -27, -20, -8, 5, -10, -4, -24, -11, -10, -2, -11, -18, -34, -21, -41, -14, -25, -22, -7, 8, -6, -6, -18, -6, -3, 2, -19, -4, -22, -24, -25, -21, -16, -25, -5, 5, -11, -9, -24, -10, -9, 10, -17, -7, -31, -25, -11, -21, -23, -21, -1, 14, -17, -1, -26, -8, -9, 6, -15, -9, -24, -25, -25, -18, -23, -23, -8, -10, -16, -4, -23, -3, -9, 3, -21, -14, -31, -36, -33, -17, -23, -20, -7, 12, -19, -9, -22, -7, -4, 8, -17, -22, -48, -31, -50, -39, -37, -32, -11, 21, -19, -11, -34, -13, -23, 10, -20, -18, -39, -50, -41, -39, -41, -38, -17, 37, 1, -33, -35, -9, -22, 18, -26, -23, -45, -44, -40, 
  -39, -51, -33, 1, 0, -22, -12, -40, -9, -8, 4, -26, -9, -54, -49, -63, -19, -31, -25, -8, 11, -16, -11, -31, -4, -4, 13, -21, 1, -32, -39, -6, -22, -47, -43, 0, 15, -16, -10, -34, -10, -10, 11, -19, -15, -35, -33, -29, -30, -40, -31, -3, -1, -12, -18, -42, -12, -6, 7, -14, -13, -58, -37, -57, -28, -37, -43, -7, 16, -14, -13, -44, -14, -8, 18, -18, -7, -45, -41, -67, -34, -36, -29, -11, 23, -22, -11, -43, -6, -14, 1, -26, -9, -41, -46, -56, -22, -36, -29, 1, 14, -18, -6, -39, -9, -6, 14, -16, -15, -23, -39, -49, -12, -35, -32, -3, 10, -11, -10, -36, -7, -4, 2, -20, -8, -26, -20, -38, -19, -31, -29, -7, 25, -14, -9, -39, -8, -4, 9, -17, -5, -29, -27, -36, -16, -33, -28, -4, 15, -17, -1, -33, -5, -2, 11, -23, 0, -27, -19, -33, -18, -24, -25, -4, 11, -14, -7, -32, -3, -6, 14, -18, -1, -23, -19, -10, -22, -21, -25, 3, 17, -17, -1, -32, -4, -4, 6, -19, -2, -12, -29, -7, -10, -27, -29, 1, 10, -17, -2, -22, -3, -2, -1, -16, -5, -21, -9, -15, -9, -16, -17, 3, 8, -18, -2, -29, 3, 0, 9, -18, -4, -12, -26, -12, -14, -25, -23, 3, 17, -17, 1, -23, -7, -4, 2, -19, -8, -32, -25, -44, -17, -23, -22, -3, 12, -14, -8, -33, -8, -10, 7, -25, -1, -35, -34, -31, -20, -29, -30, -1, 23, -10, -7, -33, -4, -6, 3, -17, -9, -44, -29, -46, -21, -27, -33, -3, 21, -13, -18, -36, -6, -8, 14, -15, -5, -49, -45, -52, -27, -32, -38, -9, 11, -19, -2, -35, -13, -6, 11, -19, -2, -30, -43, -52, -28, -29, -33, -11, 11, -14, -11, -30, -10, -10, 9, -22, -19, -29, -34, -48, -22, -31, -35, -8, 5, -13, -7, -35, -8, -9, -1, -19, -14, -33, -29, -63, -20, -29, -26, -1, 4, -14, -8, -31, -7, -9, 6, -14, -7, -31, -27, -47, -16, -34, -24, -2, 16, -14, -10, -41, -10, -9, 12, -17, -9, -53, -30, -38, -17, -47, -34, -6, 20, -12, -12, -37, -9, -6, 9, -13, -6, -41, -29, -53, -21, -37, -34, -4, 13, -12, -4, -34, -6, -12, 8, -23, -6, -21, -54, -51, -20, -16, -28, 4, 2, -12, -8, -16, -13, -12, 2, -22, -21, 3, -11, -37, 2, 3, -3, 7, 0, -9, -8, -5, -3, -5, 9, -8, 6, -3, 2, 32, 0, -3, -10, 0, 1, -6, 1, -10, 4, 2, 6, -8, 2, -3, 6, 8, -11, -22, -7, 3, 8, -14, -3, -20, -1, 0, 0, -3, -2, -26, -15, -14, -15, -24, -26, -5, 3, -7, -20, -20, -5, -9, 0, -8, -9, -31, -25, -47, -18, -16, -12, 8, 2, -12, -7, -34, -5, -4, 12, -10, -5, -41, -38, -29, -17, -21, -20, 7, 19, -12, -13, -19, -6, -1, 1, -6, 0, -17, -15, -39, -14, -15, -22, -9, 20, -5, -5, -16, 0, -6, 5, -3, -4, -18, -17, -6, -21, -14, -21, 5, 5, -8, -5, -27, -4, -7, 4, -11, -2, -15, -30, -14, -17, -23, -21, -1, 11, -7, 1, -24, 0, -8, 3, -13, -8, 9, -7, 8, -17, -16, -18, 5, 2, -1, -4, -18, -5, -8, 8, -6, -3, 1, -6, 23, -3, -7, -5, -4, 3, -3, -7, -10, 3, -5, 7, -10, -9, 5, -3, 12, -4, -1, -10, 10, 5, -1, 1, -7, -2, -5, 3, -7, 1, -4, 7, 25, 0, -9, -1, 2, -13, -11, 1, -9, 0, -6, 5, -6, 3, -8, 0, 24, 0, -7, -12, 10, 5, -5, -10, -16, 1, -2, 6, -5, -3, -18, -12, 8, -12, -12, -9, 2, 5, -12, -3, -14, -2, -5, 8, -9, 5, -12, -7, -2, -12, -19, -18, 8, 7, -12, -16, -21, 0, -3, 13, -7, -2, -35, -19, -28, -12, -22, -18, -4, 8, -5, -7, -22, 2, -2, 9, -8, -9, -18, -8, -21, -12, -22, -13, 5, 7, -5, -11, -21, -3, -6, 3, -10, 4, -14, -14, -29, -11, -9, -14, 6, 4, -2, -3, -19, 1, -5, 8, -2, -4, -8, -6, -14, -10, -13, -8, 8, 6, -9, -7, -13, 2, -5, 2, -9, 0, -1, -1, 6, -12, -6, -18, 12, 4, -9, -6, -18, 0, -2, 9, -8, 1, -3, -5, 16, -5, -22, -22, 5, 1, -8, -11, -20, -1, -3, 7, -10, 5, -6, -5, 15, -13, -11, -15, 4, 13, -4, -9, -14, 0, -7, 8, -6, 5, -8, -1, 9, -7, -8, -5, 5, 15, -8, -2, -19, 0, 0, 5, -4, 2, 9, 2, 25, -4, -10, -5, 6, 11, -4, -6, -13, 1, -4, 12, -8, 3, -4, 2, 27, -10, -13, -22, 12, 3, -10, -8, -17, -2, -8, 11, -1, 1, -17, -13, -14, -15, -30, -17, 1, 2, -10, -18, -24, -8, -8, 15, 1, -3, -34, -16, -34, -19, -34, -21, 4, 3, -16, -16, -26, -7, -11, 8, -5, -4, -42, -29, -29, -23, -27, -25, 5, 14, -13, -25, -27, -2, -10, 12, -6, 1, -27, -23, -49, -20, -13, -17, 6, 14, -14, -7, -23, -5, -9, 9, -6, 2, -7, -16, -20, -15, -12, -15, 5, 2, -6, -6, -16, 2, 0, 10, -9, -3, -5, -14, 1, -5, -17, -9, 3, 10, -5, -8, -15, -4, -4, 7, -7, 7, -4, -6, 1, -11, -8, -13, 11, 7, -9, -6, -18, -5, -6, 7, -11, 1, -13, -14, -13, -16, -18, -10, 11, 6, -9, -9, -19, 0, -8, 3, -5, 1, -11, -6, -4, -9, -5, -9, 4, 10, -8, -12, -18, -2, 0, 11, -6, -3, -22, -6, -5, -7, -8, -8, 7, -2, -4, -10, -21, -3, -7, -3, -2, 3, 6, 4, 5, -3, -14, -6, 8, 10, -7, -5, -21, 3, -2, 7, -4, 4, -1, 4, 13, 3, -2, -11, 6, -1, -4, -1, -20, -4, -2, 6, -4, 10, -1, 0, -6, 0, -10, -11, 9, 3, -7, -1, -15, -5, 1, 13, -6, 2, -11, 0, 1, -12, -18, -11, 10, 1, -12, -10, -24, -2, -4, 1, -4, 4, -25, -12, -6, -15, -15, -16, -1, 12, -9, -9, -23, -7, -8, 4, -9, -6, -25, -17, -27, -18, -19, -14, 8, 7, -12, -30, -25, -5, -9, 13, -7, -1, -19, -27, -38, -9, -14, -17, 3, 1, -8, -9, -25, 1, -7, 5, -12, 2, -13, -7, -5, -12, -17, -17, 3, 3, -12, -5, -16, -7, -4, 5, -13, -5, -18, -7, -20, -14, -27, -14, 1, 2, -3, -4, -30, -4, -10, 15, -6, 2, -14, -13, -8, -10, -21, -11, 8, 11, -12, -13, -27, -5, -7, 9, -5, 1, -18, -8, -7, -12, -14, -11, 7, 6, -13, -18, -14, -4, -5, 2, -10, 0, -22, -14, -18, -8, -16, -20, 5, 4, -10, -12, -19, 2, -4, 10, -3, -1, -5, -7, 0, -14, -15, -13, 7, 10, -15, -6, -22, -5, -6, 1, -8, 7, -2, -6, 30, -2, -2, -12, 4, 3, -15, -2, -18, 3, -4, -5, -9, 3, -9, -7, 13, -1, -10, -9, 8, 7, -16, -5, -15, 1, -2, 15, -13, 1, -16, 1, 13, -4, -14, -15, -3, 16, -13, 2, -15, 3, 1, 7, -12, 12, -3, -1, 15, -8, -13, -16, 6, -5, -14, -8, -21, -1, -3, 8, -10, -4, -25, -15, 9, -18, -32, -17, 5, 6, -19, -8, -27, 0, -5, 8, -16, -5, -21, -29, -31, -12, -24, -26, 3, 18, -7, -8, -23, -3, -3, 6, -12, -13, -23, -25, -25, -13, -38, -32, -3, 18, -6, -12, -25, 0, -4, 5, -12, 3, -18, -28, -18, -20, -31, -25, 0, 6, -18, -5, -39, -7, -3, 8, -8, -8, -8, -29, -24, -17, -22, -19, 6, 6, -14, -5, -21, -5, -3, 2, -12, -9, -33, -25, -23, -11, -23, -16, 6, 10, -7, -14, -25, -7, -9, 13, -13, 1, -22, -17, -15, -8, -13, -11, 2, -3, -12, -8, -17, -5, -3, 1, -7, 5, -22, -18, -3, -39, -34, -27, 5, 5, -18, -15, -34, -2, -19, 17, -26, -6, -25, -53, -13, -36, -44, -44, 1, 15, -9, -28, -47, -12, -7, 17, -24, -4, -29, -44, -39, 
  5, 0, 6, -2, -14, -9, -6, -2, 16, 16, -4, 4, 4, -9, -5, -23, 4, 8, 10, -7, -5, -10, -2, 2, 8, 11, -5, -3, -11, -36, -10, -22, 2, -1, 1, -10, 2, -5, -31, 5, 2, 12, -4, -7, 0, -26, -17, -47, -3, 16, -7, -4, -5, 0, 20, 2, 3, 4, -2, 4, 13, 8, 7, -7, 9, 4, -2, 3, 2, 7, 24, 0, 3, 14, -13, -5, 16, 4, 3, 36, -2, -9, -12, 0, -20, -9, 2, -13, -3, -3, 6, -3, 1, 0, -5, -1, -7, 1, 2, 0, -11, -7, -13, 4, -3, 4, -14, -1, 1, -2, -2, -15, 15, 13, 16, 5, -6, -6, 4, 2, -3, 3, -9, 5, 6, -20, 3, 3, 4, 10, 14, 1, -8, -2, 13, 11, 14, 12, -6, -5, 24, 3, 2, 16, -5, -6, -2, -3, -22, -8, 15, 1, 7, 5, -6, -9, 3, -19, -1, 2, -10, -4, -9, -9, -6, -15, -4, -9, -8, 8, 1, -10, -1, -25, -5, -14, -3, 4, -5, -6, -5, -6, -10, -8, -6, 11, 2, -21, 14, -19, -10, 9, -10, -2, -1, -9, -14, -7, 7, 5, -3, 5, 1, -8, -2, -20, -14, -2, -15, -9, -2, -2, -4, -4, -14, 3, 7, -4, -4, -11, 1, -15, -16, -38, 2, 2, 1, -6, -23, -8, -22, 3, 1, -4, -22, -3, -25, -29, -5, -22, 7, 14, 11, -16, -2, -5, -16, -1, 2, 14, -13, -8, 7, -7, 0, -16, 11, 3, 3, -2, -32, -12, 11, 5, 7, 3, -20, 2, -1, 8, -9, 17, -2, 3, 1, -4, -2, -7, 1, -16, -2, 9, 0, 3, -22, -27, -7, 7, -6, -14, -4, -4, -3, -21, -23, -3, 2, -9, -5, -19, -11, -24, -13, -36, -21, -8, 4, -5, 5, -13, -4, 0, -12, -4, -7, -13, -11, -1, -2, -24, 9, 0, 8, -4, -21, -10, 10, -2, 4, 2, -12, -12, 18, 10, 8, 7, 14, 11, 8, -8, -4, -10, 22, 1, 1, 7, -16, -2, 3, 12, -1, 22, 0, 5, 6, -2, -18, -6, 11, -1, 2, 2, 15, -6, 1, -15, -3, -8, 1, -2, 2, -15, 6, -6, -23, 6, -8, 6, 3, -12, -2, -21, -12, -8, -22, 2, -4, -7, 8, -7, -14, -4, 2, -12, 3, 0, -11, -20, -12, -20, -6, -5, 1, -1, -9, -15, -13, 0, -9, -12, 1, -6, -14, -14, -2, -22, 1, 6, 12, -5, -18, -10, -29, 14, 1, -2, -3, -7, -1, 0, 3, -50, 5, 7, 8, 7, -39, -2, -3, 10, 6, 7, 1, 1, 12, 9, -4, -19, 13, 24, 2, 2, -14, 5, 13, 2, 22, 17, -16, 5, 20, -10, 11, 2, 8, 8, -2, 7, -14, 12, 19, 1, 4, 8, -9, 7, 2, -3, -7, 19, -3, 8, -3, 10, -11, 3, -8, 1, -3, -5, 1, 1, -11, -14, -1, -1, -12, -7, -5, 1, -12, -11, -2, -4, -1, 15, 3, -9, 4, 2, -4, -3, -1, 8, 5, 1, -5, -6, -5, -3, 1, 5, 9, -7, 16, -4, 2, -5, 14, 14, 6, -8, -10, -4, 24, 9, 10, 10, -13, -6, 18, 38, 6, 33, 6, -12, 0, 12, -12, 1, 27, -4, 2, 7, -8, 2, 7, 2, 10, 22, 12, -2, 9, -8, -5, -6, 8, 2, -9, -11, -6, 1, -9, -7, -6, 4, 0, -3, -7, -2, -13, -7, -14, -5, 5, -5, 6, -4, 9, -16, -15, -13, -8, -16, -4, -8, 4, -12, -10, -2, 1, 9, 13, -2, -2, -35, -5, -22, 0, -7, 4, -1, -1, -4, -31, -4, 2, -4, 0, -7, -12, -25, -14, -47, 12, 9, 19, -4, -33, -2, -20, 11, 4, 8, -16, -1, -4, -10, 6, -36, 13, 16, -1, -3, -29, 0, -7, 5, 15, 16, 1, 6, 14, 0, 17, -26, 21, 15, 6, 1, -4, -1, 12, -1, 4, 22, -3, -12, 6, 11, 4, 25, 16, 15, 7, 3, -10, -6, 1, 7, 7, 6, -8, 0, -13, -13, 12, 13, 3, 5, 5, 0, 9, -5, 17, 1, 3, 16, 1, -19, 11, -12, -11, -2, 10, 4, 3, -6, -13, -1, -15, 2, -5, 7, -2, -1, -25, -9, 12, -9, 5, 6, 5, -3, 8, 4, 0, -3, 6, -2, -2, -11, 16, 3, 8, -8, 2, 3, 5, -3, -21, 5, 17, 10, -4, -2, -13, -5, -9, 2, -1, 7, -4, 2, -2, 6, -20, 4, 14, -2, -2, -15, -7, 17, -20, -31, 0, 13, -1, 19, 12, 3, -5, -5, -18, 1, 0, 8, -8, 0, -3, -18, -2, -15, 1, 6, -7, 9, 1, 7, -10, 11, -1, 7, -14, 12, -3, -12, 0, -2, -2, -12, -6, 17, -6, -8, -1, -3, 4, -9, -6, -3, -9, -11, -8, -7, 7, 2, 9, -6, 2, -7, -19, 12, 5, 2, -16, 6, -5, -12, -2, -36, 4, 2, 5, -1, -3, 5, -7, 6, 4, 4, -8, 0, 17, 9, 7, -7, 15, 5, 9, 3, 8, 5, 19, 10, 16, 10, -21, 5, 14, 14, 13, 18, 0, 3, 1, -3, -14, 0, 17, 5, 1, 10, -8, -1, -4, -8, 9, 4, -14, -5, 2, -3, -9, -3, -8, -1, 4, 12, 4, -1, -1, -7, -4, 4, -7, -11, -11, -8, -16, 4, 2, -1, 0, 3, -1, 3, 8, 3, 6, -6, -3, -4, 7, 2, -2, 6, -9, 4, -3, -1, 11, 3, 10, -10, 4, -3, 8, 8, 0, -2, 1, -7, 27, 9, 0, 10, -4, -4, 9, 6, -7, 6, -4, 0, -2, 9, -6, -6, 14, -10, -4, 5, 2, -5, -13, 16, -12, 13, 6, 1, 0, -1, -9, -4, 1, 4, 5, 6, 11, -9, -4, -17, -3, -14, 10, -2, -3, -13, -7, 2, -25, 1, -3, 9, 3, -7, 0, -35, -20, -18, -4, 3, -10, -4, 2, -13, -21, -3, -2, 8, 0, -1, -16, -21, -3, -23, -3, -5, 10, -1, -10, -1, -38, 6, 2, 6, -18, -6, -2, -11, -8, -16, 13, 7, 4, 1, 2, -3, 2, 0, 3, 4, 0, -4, 7, -10, -6, -17, 17, 16, 7, -4, -15, -3, 10, 4, 14, 13, -9, -4, 23, -6, 7, 5, -8, 4, -2, 0, 17, -5, 21, 3, 3, 9, -1, -13, 12, 26, -12, 23, -7, -10, -12, -9, 9, -9, 3, 3, -3, -2, 10, -2, -6, -29, -4, 10, -9, -2, -9, -4, 9, 1, -5, -7, 5, 10, 6, -19, 21, 1, -12, -12, -10, -7, -16, -4, -5, -6, 0, -3, -3, -7, -3, 2, -2, -7, 8, 9, 5, -8, 9, 0, -16, -7, 10, 9, -6, 3, -12, 4, -12, -9, 8, -1, 7, 13, 5, 1, -23, 0, 32, -2, 14, 8, -4, -5, 28, 10, 2, 16, 2, -2, 1, 0, -13, 2, 17, 3, 3, -1, -9, 3, 5, -15, -18, 6, -5, 8, -1, 0, -10, -5, -22, 2, 4, 3, -9, 9, 1, -31, -4, -30, -7, -7, 2, -3, -17, -5, -2, -3, -5, 22, -8, 5, -5, -28, -12, -6, -19, -14, 4, -10, -7, -10, -16, -7, -4, 0, 13, 1, -3, -32, -1, -24, 6, 2, 4, -4, -1, 2, -21, 2, -2, -2, -1, 3, -11, -23, -7, -32, 8, -5, -2, 2, -14, 6, -13, 6, -5, 4, -14, 5, 18, 16, 4, -28, 8, 8, 6, 6, -18, 13, 8, -6, 2, 14, 5, -8, 9, 1, 3, -6, -7, -4, 7, -2, -7, 2, -10, -2, -11, 2, 10, -1, -13, -2, -4, 3, -5, -9, -1, -4, 11, -1, -1, 0, 5, 2, 12, -10, 9, 1, -14, -20, 2, 3, -7, -7, 5, 6, -4, 1, 5, 11, -3, -14, 4, 10, 3, -2, 3, -6, -8, -5, -9, -4, 17, 0, 0, -6, 7, 1, 11, -25, 3, 12, 7, 11, 5, 2, -22, -5, 18, 9, 6, 7, -7, 5, 9, -6, -3, 10, 14, 5, 15, 6, -17, -3, 23, 5, 8, 13, 0, -7, 12, -4, -17, 16, -4, -3, -5, -1, -13, -3, 15, 3, 8, 13, -1, -1, -8, -36, -17, -11, 5, 9, -6, 0, 13, 3, -3, -3, 3, 5, -5, 4, 7, -8, -9, -28, -5, -11, 10, 1, 4, -7, -22, -4, 5, 9, -11, -9, -2, 5, -1, 3, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 7,1408 } };
const TfArray<1, float> quant7_scale = { 1, { 0.013772492296993732, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -598, -458, -441, 366, 2797, -1042, -788, -596, -271, -887, 2796, -621, 4, -766, -531, -102, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.609136885846965e-05, 9.0985289716627449e-05, 5.6610955653013662e-05, 5.1336613978492096e-05, 4.2691142880357802e-05, 2.5373088647029363e-05, 0.00011444458505138755, 5.1605737098725513e-05, 6.1840524722356349e-05, 8.0455945862922817e-05, 5.0862294301623479e-05, 2.7373016564524733e-05, 6.5987267589662224e-05, 7.2949180321302265e-05, 6.7609857069328427e-05, 0.00010494267189642414, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 127,-3,94,100,-29,-2,24,2, 63,11,36,28,-25,17,115,-69, 64,31,11,23,-26,-31,68,-4, 
  /* [1][0][][] */ 40,19,6,38,15,-32,24,6, 42,-20,-7,13,29,23,57,18, 127,-21,14,-11,-20,-26,-9,-9, 
  /* [2][0][][] */ 78,-3,-18,58,-12,-20,5,5, 121,-17,34,84,7,-47,34,34, -22,1,31,9,-6,3,127,-1, 
  /* [3][0][][] */ 127,-45,9,-17,42,-10,-33,23, 83,-62,-22,43,-16,-25,-26,10, 5,-22,-45,-40,16,-12,25,28, 
  /* [4][0][][] */ -104,-80,-92,-109,-106,-59,-25,65, -94,-18,-54,-76,-99,37,-26,45, 17,67,104,-75,-127,58,-99,19, 
  /* [5][0][][] */ -29,56,61,108,-44,-108,-13,112, -39,63,1,-25,99,82,-62,-42, 57,88,127,91,1,11,-45,87, 
  /* [6][0][][] */ 127,5,34,18,-51,-8,-17,2, 69,-9,32,-5,-41,-4,-27,13, 42,-9,5,9,-31,3,-37,-18, 
  /* [7][0][][] */ 50,52,15,-48,-41,56,62,18, 127,61,75,70,27,41,68,27, 123,-13,-9,29,43,17,79,19, 
  /* [8][0][][] */ 127,-54,20,26,-7,-15,79,14, 78,-41,-67,19,6,-18,-15,32, 57,-34,18,0,-11,18,8,-13, 
  /* [9][0][][] */ 127,-27,4,13,-18,20,66,13, 69,-32,-12,-25,-14,15,18,4, 95,-35,-46,28,-20,11,8,25, 
  /* [10][0][][] */ -73,-71,-107,44,1,-34,-6,-1, -111,-80,-127,3,-35,-47,-65,17, -98,-42,-111,6,-41,18,-68,66, 
  /* [11][0][][] */ -93,28,-71,111,85,20,-44,-61, -37,-90,3,31,108,-99,-12,24, -3,-52,-127,102,-76,-84,-83,-33, 
  /* [12][0][][] */ 8,-11,-72,69,-33,-9,75,-13, 105,-7,-52,-23,-34,20,-41,-13, 127,26,1,-7,30,-43,-42,15, 
  /* [13][0][][] */ 34,-12,18,-21,-42,28,-3,21, 127,11,12,4,-46,-29,-1,41, 60,20,73,4,31,-29,-43,49, 
  /* [14][0][][] */ 76,12,58,-4,-8,22,-8,-18, 27,44,67,27,-1,-1,5,-42, 120,-33,27,127,1,-37,-9,-41, 
  /* [15][0][][] */ 127,35,10,18,9,-10,-10,26, 63,-16,23,-7,-4,-16,-12,-9, 26,-34,17,-27,-13,-6,-9,0, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0046603255905210972, 0.0091995764523744583, 0.0057239672169089317, 0.005190675612539053, 0.0043165269307792187, 0.0025654879864305258, 0.011571560055017471, 0.0052178865298628807, 0.006252732127904892, 0.0081349480897188187, 0.0051427166908979416, 0.0027677018661051989, 0.0066720121540129185, 0.0073759350925683975, 0.0068360730074346066, 0.010610816068947315, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { -200, -439, -117, -55, -2101, -7768, 693, -4804, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 2.5620527594583109e-05, 1.2277347195777111e-05, 1.3296697034093086e-05, 1.4854539585940074e-05, 1.2851620340370573e-05, 8.1395610322942957e-06, 1.8620461560203694e-05, 8.4393614088185132e-06, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*1*3*40] = { 
  /* [0][0][][] */ 86,44,-21,-33,-92,-73,-5,-35,-35,-36,-35,-39,16,-50,-15,47,20,4,12,9,22,-7,-5,37,37,5,19,-39,-3,-27,-36,13,2,-38,16,4,30,34,63,11, 107,53,-41,3,-53,-72,-7,-28,-21,-31,22,30,-52,-1,30,76,66,37,13,49,-5,0,-5,19,10,-17,27,-25,4,-18,-41,6,-46,-67,-24,3,32,51,11,-20, 127,21,34,-52,13,-78,-56,-45,-8,2,-28,-34,-23,-67,-19,19,2,14,31,5,26,-30,-25,8,10,-43,-58,-24,-35,-24,-62,-74,-37,-66,-46,-35,-10,49,34,-19, 
  /* [1][0][][] */ -115,-102,-37,79,-89,32,-109,3,-57,-40,-65,-89,16,-52,53,39,-54,-66,34,35,9,-65,-24,-28,-20,-90,-106,-56,-42,-24,-35,-114,-65,-20,-8,3,-101,-127,-95,-126, 22,-39,-47,58,1,73,49,42,-16,-26,-10,-13,51,-2,-18,103,61,-39,-21,-2,53,53,-36,-29,-73,-32,-8,-32,-5,42,-40,-31,-26,39,-6,-25,-69,-59,-72,-106, 90,-34,40,65,-11,116,90,7,-61,30,-18,82,111,39,57,93,51,92,107,40,38,43,-28,50,58,64,-7,99,12,-34,51,-21,28,-50,-12,73,41,-2,-61,33, 
  /* [2][0][][] */ 75,52,-73,-11,-80,-62,27,43,-78,-53,-1,-45,26,-65,-26,55,52,-4,98,60,62,-23,-28,-4,-7,-92,-94,-114,-37,-91,-76,-13,-71,30,68,-45,23,-53,-34,-55, 59,-10,-30,-24,-17,0,22,-27,-5,-113,42,-38,-25,26,96,58,-33,11,105,98,30,35,-22,-3,-55,23,-60,-44,-80,-70,-51,23,-71,7,-13,-40,-63,22,-76,-54, 55,-56,-50,-2,45,4,68,59,-15,-106,-68,-5,24,57,50,51,-34,4,127,-7,49,16,-31,19,35,-80,-13,-63,-15,28,11,-37,-2,-50,39,-24,11,64,-46,-63, 
  /* [3][0][][] */ -119,-68,-48,-58,85,59,127,79,69,-45,-1,-29,-3,33,23,-1,64,31,46,30,22,18,21,50,36,75,89,-23,81,52,48,45,35,23,22,28,-1,49,5,72, -118,-97,-72,-42,43,81,111,11,51,9,-77,-32,-40,-47,21,-68,33,32,-3,17,0,-28,-38,31,-10,-30,50,-38,15,-11,35,28,-15,-33,-60,-60,-25,-30,60,-34, -32,-79,-26,-92,44,76,45,25,-84,-38,5,-56,-71,-3,-98,-46,-34,-25,-31,34,-93,-41,-79,-15,-50,-15,57,10,49,-51,20,-78,-56,-49,-80,-54,-27,-75,-62,-46, 
  /* [4][0][][] */ 29,-70,-8,54,-13,41,76,88,-1,-13,-61,58,65,51,-42,19,-70,-64,-38,-57,-45,-74,-68,-39,-64,19,19,27,54,-16,-56,-11,-72,-40,35,-56,-18,59,-21,40, 53,9,69,-5,7,57,127,19,35,-19,0,68,34,71,-54,-43,-62,-1,42,-10,-16,19,24,29,-3,95,51,-12,20,69,-62,40,-71,-55,66,37,-6,38,-31,34, 41,-105,-63,-10,-15,9,116,59,-5,-37,-20,85,92,70,-78,-16,-78,-50,14,22,8,-19,-16,-45,2,-11,-11,-1,1,74,33,-75,40,28,-28,58,79,69,20,-28, 
  /* [5][0][][] */ -64,-7,-34,6,22,-10,-80,-12,-33,44,-53,67,-4,37,-55,-16,-103,11,-19,57,-62,-38,63,-127,-39,-116,-6,17,-89,68,-121,63,-5,-50,45,-8,-43,-78,47,-63, -116,-124,25,27,3,-53,-104,-81,-86,-77,-95,-94,-29,41,-66,-35,-27,-36,72,71,46,-64,23,40,-99,2,-88,48,7,5,-71,-39,-94,19,-80,-43,5,65,-55,-101, 51,-98,70,-23,2,-1,-38,-52,6,73,46,24,-29,52,-75,16,58,-62,-6,-105,42,68,-74,17,-53,-91,57,45,2,-56,-9,56,-49,-120,-88,-95,-27,-92,14,67, 
  /* [6][0][][] */ 126,111,47,-25,22,-62,-58,-104,-127,-91,-52,-30,-35,-21,19,-4,8,29,-11,-30,-67,-39,-38,-19,-39,11,72,6,34,16,17,-8,50,0,-8,41,-25,50,-16,-13, 76,-28,25,1,-36,12,-57,-43,-54,-12,-44,8,-40,32,55,-15,4,-31,25,10,-63,-89,-37,-45,-61,57,18,17,13,30,60,68,-5,75,1,67,72,53,-20,-7, 110,25,13,-49,-40,-109,-54,-70,-9,-10,-59,-72,6,-29,-34,-60,47,-42,-11,-47,-53,-117,-17,-58,-22,-6,-36,-19,-5,40,-19,-4,-6,61,7,68,-2,-29,-36,11, 
  /* [7][0][][] */ 47,-35,17,4,43,3,-104,46,-38,-55,66,-97,42,-100,-58,-8,-56,84,-61,-46,-55,10,-100,-26,58,-40,2,119,84,49,-53,-67,38,63,-28,-77,34,-32,19,-71, -56,-18,-80,-66,-102,-79,11,59,0,19,66,-86,26,-39,-111,-84,-123,-51,-20,-106,-43,-2,31,36,-3,-49,-32,100,47,-61,-111,-33,42,16,42,0,8,23,-45,-23, -6,-73,-78,-73,-85,-48,-33,11,-22,35,-37,-15,-90,14,7,32,-23,50,45,-22,-26,41,50,76,-68,84,51,127,-6,46,29,60,-84,-50,-104,-1,-97,-71,25,1, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0065588550642132759, 0.0031430008821189404, 0.0034039544407278299, 0.003802762134000659, 0.0032900148071348667, 0.0020837276242673397, 0.0047668381594121456, 0.0021604765206575394, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,349,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,349,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0098901605233550072, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,349,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0098901605233550072, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,175,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0098901605233550072, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,175,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0098901605233550072, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,175,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.010261929593980312, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,175,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.010261929593980312, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,88,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.010261929593980312, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,1408 } };
const TfArray<1, float> quant20_scale = { 1, { 0.010261929593980312, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,7 } };
const TfArray<1, float> quant21_scale = { 1, { 0.39257016777992249, } };
const TfArray<1, int> quant21_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,7 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13968), (TfLiteIntArray*)&g0::tensor_dimension0, 13960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 28, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 9856, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 13960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13968), (TfLiteIntArray*)&g0::tensor_dimension13, 2792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 2792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2800), (TfLiteIntArray*)&g0::tensor_dimension15, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2800), (TfLiteIntArray*)&g0::tensor_dimension17, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2800), (TfLiteIntArray*)&g0::tensor_dimension19, 1408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 1408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1408), (TfLiteIntArray*)&g0::tensor_dimension21, 7, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 7, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
